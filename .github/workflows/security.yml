name: Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  FORCE_COLOR: 1
  CI: true

jobs:
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          persist-credentials: false

      - name: Dependency Review
        uses: actions/dependency-review-action@56339e523c0409420f6c2c9a2f4292bbb3c07dd3 # v4
        with:
          fail-on-severity: moderate
          warn-only: false

  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          persist-credentials: false

      # Node.js version management: consider using node-version-file: .nvmrc or package.json#engines.node
      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: '20.19.5'

      - name: Setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        with:
          cache: true

      - name: Install dependencies
        run: pnpm install --prefer-offline --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for known security issues
        run: |
          # Run pnpm audit and capture output
          if ! pnpm audit --audit-level moderate; then
            echo "::error::Security vulnerabilities found. Please run 'pnpm audit' locally and fix the issues."
            exit 1
          fi

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']

    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          persist-credentials: false

      - name: Initialize CodeQL
        uses: github/codeql-action/init@64d10c13136e1c5bce3e5fbde8d4906eeaafc885 # v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-and-quality

      # Node.js version management: consider using node-version-file: .nvmrc or package.json#engines.node
      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: '20.19.5'

      - name: Setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        with:
          cache: true

      - name: Install dependencies
        run: pnpm install --prefer-offline --frozen-lockfile

      - name: Build packages
        env:
          SKIP_ENV_VALIDATION: true
        run: pnpm build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@64d10c13136e1c5bce3e5fbde8d4906eeaafc885 # v3
        with:
          category: '/language:${{matrix.language}}'

  trivy:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          persist-credentials: false

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@64d10c13136e1c5bce3e5fbde8d4906eeaafc885 # v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          persist-credentials: false

      # Node.js version management: consider using node-version-file: .nvmrc or package.json#engines.node
      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: '20.19.5'

      - name: Setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        with:
          cache: true

      - name: Install dependencies
        run: pnpm install --prefer-offline --frozen-lockfile

      - name: Check licenses
        run: |
          # Install license checker
          npx license-checker --summary

          # Fail on GPL, AGPL, or other copyleft licenses
          if npx license-checker --onlyAllow 'MIT;BSD;ISC;Apache;Apache-2.0;BSD-2-Clause;BSD-3-Clause;Unlicense;WTFPL' --excludePrivatePackages; then
            echo "✅ All licenses are compatible"
          else
            echo "❌ Incompatible licenses found"
            exit 1
          fi
